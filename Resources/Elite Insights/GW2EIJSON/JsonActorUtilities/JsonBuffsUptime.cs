namespace GW2EIJSON;

/// <summary>
/// Class representing buff uptimes
/// </summary>
public class JsonBuffsUptime
{
    /// <summary>
    /// Buff uptime data
    /// </summary>
    public class JsonBuffsUptimeData
    {
        /// <summary>
        /// Uptime of the buff
        /// </summary>
        public double Uptime;

        /// <summary>
        /// Presence of the buff (intensity only)
        /// </summary>
        public double Presence;

        /// <summary>
        /// Buff generated by
        /// </summary>
        public IReadOnlyDictionary<string, double>? Generated;

        /// <summary>
        /// Buff overstacked by
        /// </summary>
        public IReadOnlyDictionary<string, double>? Overstacked;

        /// <summary>
        /// Buff wasted by
        /// </summary>
        public IReadOnlyDictionary<string, double>? Wasted;

        /// <summary>
        /// Buff extended by unknown for
        /// </summary>
        public IReadOnlyDictionary<string, double>? UnknownExtended;

        /// <summary>
        /// Buff by extension
        /// </summary>
        public IReadOnlyDictionary<string, double>? ByExtension;

        /// <summary>
        /// Buff extended for
        /// </summary>
        public IReadOnlyDictionary<string, double>? Extended;
    }


    /// <summary>
    /// ID of the buff
    /// </summary>
    /// <seealso cref="JsonLog.BuffMap"/>
    public long Id;

    /// <summary>
    /// Array of buff data \n
    /// Length == # of phases
    /// </summary>
    /// <seealso cref="JsonBuffsUptimeData"/>
    public IReadOnlyList<JsonBuffsUptimeData>? BuffData;

    /// <summary>
    /// Array of int[2] that represents the number of buff \n
    /// Array[i][0] will be the time, Array[i][1] will be the number of buff present from Array[i][0] to Array[i+1][0] \n
    /// If i corresponds to the last element that means the status did not change for the remainder of the log
    /// </summary>
    public IReadOnlyList<IReadOnlyList<long>>? States;


    /// <summary>
    /// Key corresponds to the name of the source \n
    /// Array of int[2] that represents the number of buff \n
    /// Array[i][0] will be the time, Array[i][1] will be the number of buff present from Array[i][0] to Array[i+1][0] \n
    /// If i corresponds to the last element that means the status did not change for the remainder of the log
    /// </summary>
    public IReadOnlyDictionary<string, IReadOnlyList<IReadOnlyList<long>>>? StatesPerSource;
}
